{"pages":[{"title":"about","text":"一个普通的软件工程师，本科毕业于南京信息工程大学，苏州大学研究生在读。 擅长Java、Python、MySQL、Redis等。 该博客为平日学习内容的简单笔记。 This is me around the web: email: lwolvej@outlook.com github: lwolvej","link":"/about/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Configure hexo blog - 1","text":"重新折腾了一番博客之后对过程进行简单的记录, 方便下次折腾做参照. hexo相关github上传安装hexo-deployer-git插件,并在_config.yml下添加如下配置:123456deploy: type: git branch: main repository: github: https://github.com/用户名/博客仓库 # gitee: 网址(同时上传gitee的选项) gulp压缩利用gulp对网站静态文件进行压缩,来达到提高访问速度的目的. 安装gulp, gulp-html-minifier-terser, gulp-clean-css, gulp-uglify, gulp-babel. 此处要安装gulp-babel的原因是gulp-uglify不支持es6, 需要通过babel来转义. 在项目根目录新建.babelrc文件并写入以下内容:123{ &quot;presets&quot;: [&quot;@babel/preset-env&quot;]} 在项目跟目录新建gulpfile.js文件并写入以下内容:123456789101112131415161718192021222324252627282930313233343536const gulp = require('gulp');const htmlmin = require('gulp-html-minifier-terser');const cssmin = require('gulp-clean-css');const babel = require('gulp-babel');const uglify = require('gulp-uglify');// 压缩css文件gulp.task('minify-css', function () { return gulp.src('./public/**/*.css') .pipe(cssmin()) .pipe(gulp.dest('./public'));});// 压缩html文件gulp.task('minify-html', function () { return gulp.src('./public/**/*.html') .pipe(htmlmin({ removeComments: true, // 移除注释 removeEmptyAttributes: true, // 移除值为空的参数 removeRedundantAttributes: true, // 移除值跟默认值匹配的属性 collapseBooleanAttributes: true, // 省略布尔属性的值 collapseWhitespace: true, // 移除空格和空行 minifyCSS: true, // 压缩HTML中的CSS minifyJS: true, // 压缩HTML中的JS minifyURLs: true // 压缩HTML中的链接 })) .pipe(gulp.dest('./public'))});// 压缩js文件gulp.task('minify-js', function () { return gulp.src(['./public/js/*.js']) .pipe(babel()) .pipe(uglify()) .pipe(gulp.dest('./public/js'));});gulp.task('default', gulp.parallel('minify-html', 'minify-css', 'minify-js')); 一些命令 命令 含义 hexo clean 清除之前生成的静态文件 hexo g 生成静态文件 hexo d 部署 hexo s 本地查看 gulp 执行gulp task 一般部署命令: hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d 主题相关主题选择主题的选择从github上搜索”hexo theme”,按照star数量排序,挑个喜欢的… 选择标准为: 自定义程度高,虽然有了源码自己改就行了,但是我前端水平明显不支持这样. 界面简洁,不要material design的! 不要任何多余的功能,评论,挂件什么的! 支持Tex数学公式 最后选择了现在这个 icarus. 主题配置去掉一切评论,捐助,挂件等一些多余的功能. 配置一下cdn,当然也没什么好配置的,改成熟悉的几个,访问都挺慢,也没打算能在国内正常访问. 现在的配置和以前不一样了,配置文件不在 theme/主题名的 的目录里,而是在项目的root目录下: _config.主题名.yml. _config.page.yml作为一般页面的配置, _config.post.yml作为文章页面的配置. 域名相关常见流程常见的买域名, 添加解析, 因为备案很麻烦, 加上服务器在国外, 所以也懒得去备案了, 这样用的就挺好. 在repo的 Settings-&gt;Pages-&gt;Custom domain 处添加自己的域名. 添加cloudflare按照cloudflare正常流程走一遍, 添加dns解析, SSL\\TLS加密模式改为完全. 在页面规则中添加一定的规则. 用cloudflare原因, 能够https, 还有就是免费的享受一整套服务, Why not? 至于虽然cdn但是国内减速, Who cares. 图床选择之前自己用过国内的gitee, 但是在今年三月挂掉了, gitee加上了防盗链, 并且对相关的repo进行封锁. 虽然听说现在又可以了, 但是信任这种东西, 一次消耗了就没了. 自己不介意收费, 如果有稳定的服务, 交点也可以. 于是看了一下七牛云, 挺好的, 我这种小站也不会有什么费用, 但是测试域名只有30天使用时间, 需要自己的域名, 并且是备案过的域名, 遂放弃. 同学推荐了sm.ms, 有免费的方案, 但是听说出现过问题, 这种用爱发电的小站的确不能奢求什么. 现在使用的是利用github搭建的图床, 背靠大厂稳定是肯定的, 因为在境外, 速度就别想了, 当然这也不是我的考虑因素. 实现方案是Github + PicGo + Github Action. 首先github创建一个新的repo用来存放图片. 在个人的 Settings -&gt; Developer Settings -&gt; Person access token generate new token 来给PicGo使用. 在PicGo中完成如图设置: 之后为了优化访问速度, 使用Github Action在push时自动缩减图片大小. 其中需要生成新的token(参考上面的给PicGo生成的). 创建 .github/workflows/calibreapp-image-actions.yml 文件. 内容如下:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859name: Compress imageson: push: branches: - main paths: - '**.jpg' - '**.jpeg' - '**.png' - '**.webp' workflow_dispatch: schedule: - cron: '30 2 1 * *'jobs: build: name: calibreapp/image-actions runs-on: ubuntu-latest # Only run on main repo on and PRs that match the main repo. if: | github.repository == 'lwolvej/blog-pic' &amp;&amp; (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) steps: - name: Checkout Branch uses: actions/checkout@v2 - name: Compress Images id: calibre uses: calibreapp/image-actions@main with: githubToken: ${{ secrets.BLOG_PIC_TOKEN }} # For non-Pull Requests, run in compressOnly mode and we'll PR after. compressOnly: ${{ github.event_name != 'pull_request' }} jpegQuality: '60' jpegProgressive: true pngQuality: '60' webpQuality: '60' - name: Create Pull Request # If it's not a Pull Request then commit any changes as a new PR. if: | github.event_name != 'pull_request' &amp;&amp; steps.calibre.outputs.markdown != '' uses: peter-evans/create-pull-request@v4 id: cpr with: title: Auto Compress Images branch: image-compress commit-message: Compress Images body: ${{ steps.calibre.outputs.markdown }} labels: | automerge delete-branch: true branch-suffix: timestamp - name: Enable Pull Request Automerge if: steps.cpr.outputs.pull-request-operation == 'created' uses: peter-evans/enable-pull-request-automerge@v2 with: token: ${{ secrets.BLOG_PIC_TOKEN }} pull-request-number: ${{ steps.cpr.outputs.pull-request-number }} merge-method: squash 在项目的Settings -&gt; Secrets -&gt; Actions New repository secret, 命名为BLOG_PIC_TOKEN(和automerge.yml中GITHUB_TOKEN内容保持一直). 并填入刚才生成的token. 主要功能：在有图片commit时和每个月一号凌晨两点半对图片进行压缩. cron的相关规则：123456789┌───────────── minute (0 - 59)│ ┌───────────── hour (0 - 23)│ │ ┌───────────── day of the month (1 - 31)│ │ │ ┌───────────── month (1 - 12 or JAN-DEC)│ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)│ │ │ │ ││ │ │ │ ││ │ │ │ │* * * * * operator description exampel * Any value 15 * * * * runs at every minute 15 of every hour of every day. , Value list separator 2,10 4,5 * * * runs at minute 2 and 10 of the 4th and 5th hour of every day. - Range of values 30 4-6 * * * runs at minute 30 of the 4th, 5th, and 6th hour. / Step values 20/15 * * * * runs every 15 minutes starting from minute 20 through 59 (minutes 20, 35, and 50). 其他详细的配置可以查看每个库的README. 最后安装github app (kodiakhq)[https://kodiakhq.com/]. 来实现pr的auto merge.","link":"/2022/05/06/Configure-hexo-blog-1/"},{"title":"Linear Algebra Note-1","text":"通过学习一些基本的线性代数概念，熟悉其英文表达，以及在Tex中表示方式。 标量、向量、矩阵、张量 标量(scalar)：一个单独的数。 表示方式：$\\mathcal{x}$ 向量(vector)：一列数。 表示方式：$\\boldsymbol{x}$ 将向量看成空间中的点，每个元素是不同坐标轴上的坐标 定义集合 $\\mathcal{S} = \\lbrace 1, 2, 3 \\rbrace$, 指定 $\\mathcal{x}_1, \\mathcal{x}_2,\\mathcal{x}_3$，写作$\\mathbf{x}_s$ 除S外其他元素表示为 $\\boldsymbol{x}_{-s}$ 矩阵(matrix)：二维数组。 行(row), 列(column) 表达方式：$\\boldsymbol{A}$ 张量(tensor)：多维数组 表达方式：$\\mathbf{A}$ 其他 转置(transpose) 广播(broadcasting) 乘法 两个矩阵标准乘积，可以写作 $\\boldsymbol{C} = \\boldsymbol{AB}$， 定义为 \\boldsymbol{C}_{i,j}=\\sum_{k}\\boldsymbol{A}_{i,k}\\boldsymbol{B}_{k,j} 两个矩阵对应元素乘积(element-wise product)或者叫做 Hadamard乘积(Hadamard product)，记为 $\\boldsymbol{A}\\odot\\boldsymbol{B}$ 向量 $\\boldsymbol{x},\\boldsymbol{y}$ 的点积(dot product)记为 $\\boldsymbol{x}^T\\boldsymbol{y}$ 线性方程组表示为 $\\boldsymbol{Ax} = \\boldsymbol{b}$ 单位矩阵和逆矩阵 逆矩阵(matrix inversion)，记作 $\\boldsymbol{A}^{-1}$ 单位矩阵(identity inversion)，n维单位向量记作 $\\boldsymbol{I}_n$","link":"/2022/05/04/linear%20algebra%20note-1/"},{"title":"New Begin","text":"考研结束重新恢复了博客。主要的工作：添加自定义的域名访问，而不是用之前的github.io。更新了主题。丢掉了之前的内容，主要因为内容比较浅显，对于现在来说价值不高。 关于写博客这件事距离上一次写博客还是大三，中间考研的过程并没有写过博客，每天重复训练相同的内容也没有写的心思。 一开始打算写博客，并不是因为博客本身能干什么，我只是单纯的觉得有个自己的网站很cool。平时也会做点笔记，价值都不算很高。 这次重新开始写博客，主要还是想着当作笔记，记录一下平时的学习内容。 关于考研这件事我之所以去考研，是因为我想通过研究生这三年掌握深入一个方向的方法。 在本科阶段，学了各式各样的课程，但是总觉得是皮毛。曾经想在DB和OS方面进一步探索，但是苦于没有科学的方法，自己一个人像是没头苍蝇找不到方向，最后不了了之。研究生三年我想通过在某个领域的深耕掌握这一方法，在我看来这对于我以后的工作和生活大有裨益。 考研考了两次才上岸，在我看来并不是什么光彩的事情。这段时间不停的训练相同的，大部分和以后学习无关的内容，在我看来无不是对时间的浪费，可是没有办法，为了自己的发展不得不这么做。要说考研期间的收获，更多是心态上的吧，面对失败我更能坦然面对了，更有耐心去学一些我不想学但是不得不学的东西了，再一次次等待结果的过程里我的心态更加平和了。 这段漫长假期的打算先按照老师安排的来，具体感觉要等到开学接触了周围的人才能做决定。 大三期间学了一点，但是因为去考研没能精通的东西，Vim，Shell等，也想趁着这段时间精通。 短期读研的打算发论文？做实验？对研究生要做什么现在什么都不了解，感觉也不好妄下结论。研究生期间如果有绩点的话，要拿高点。其他的…emmm等开学吧！ 加油！","link":"/2022/04/26/new%20begin/"}],"tags":[{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"},{"name":"线性代数","slug":"线性代数","link":"/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"新的开始","slug":"新的开始","link":"/tags/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"}],"categories":[{"name":"博客设置","slug":"博客设置","link":"/categories/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/"},{"name":"机械学习","slug":"机械学习","link":"/categories/%E6%9C%BA%E6%A2%B0%E5%AD%A6%E4%B9%A0/"},{"name":"杂文","slug":"杂文","link":"/categories/%E6%9D%82%E6%96%87/"}]}